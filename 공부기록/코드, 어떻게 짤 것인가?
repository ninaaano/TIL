코드를 짜기 전 기능 요구 사항을 먼저 파악하고 작성한다
먼저 어떻게 짤 것인지 고민한다
요구 사항이 주어져 있다면 요구 사항을 정리해보자
그 다음, 기능 목록을 작성한다

어떤 프로그램을 만들 것인지 패키지를 잡고 시작해보자
domain는 내가 실제로 다룰 비즈니스 로직이 들어있는 영역
자바에서 class 는 파일이라고 생각하면 된다

인텔리제이 맥북 기준으로 커맨트+n을 누르면 생성자를 generate할 수 있다
기능을 function, 즉 메소드라고 부른다 
생성자는 대문자로 만들고 메소드는 소문자로 이름을 짓는다
new 연산자를 이용해서 만든 것을 인스턴스라고 부른다

클래스 내부에서 static을 붙여 선언한 값들은 다른 곳에서 클래스 자체로 호출할 수 있다
ex) public class Calculate
public static int shareResult; // 클래스 변수
public int result; // 인스턴스 변수
>> Calculate.shareResult 로 호출할 수 있다. 값은 건들인 마지막으로 저장된다

public final int number; //상수 로 선언하면 이 값은 바꿀 수 없다.
상수는 보통 전부 대문자로 작성하고 유일하게 _ 를 허용한다
접근방법은 클래스 변수와 동일하다. 상수는 클래스 변수이면서 변하지 않는 값이다

객체 지향 프로그래밍 어렵지않다
1. 기능을 가지고 있는 클래스를 인스턴스화(=객체)한다
2. 필요한 기능(역할에 맞는)을 각 인스턴스가 수행하게한다(의인화)
3. 각 결과를 종합한다

여기까지 생각했으면 작성했던 기능 목록에 이름을 지어주자
이름은 생각을 잘하고 지어야한다. 이름을 딱 봤을때 이 클래스의 기능이 무엇인지 유추할 수 있게끔 해야한다

다음으로 기능들의 뼈대를 만들어준다. 
값을 담을 때 배열을 사용하는 건 중간에 값을 넣거나 빼기가 어렵기 때문에
코딩테스트나 알고리즘이 아니면 배열보단 리스트를 사용하는게 좋다
Collections 를 잘 활용하도록 하자

대충 뼈대를 다 만들었다면 커밋을 해서 기록을 남긴다
커밋을 할땐 커밋 컨벤션에 대해서도 생각해야한다
https://meetup.toast.com/posts/106
를 참고하도록 하자

그 다음 쉬운 것을 골라잡아 구현을 해보자.
가장 처음에 만들어야겠다고 생각한 것을 구현해도 좋다
기능 구현이 끝났다면 다시 커밋을 해서 기록을 넘겨준다

코드는 구현이 끝날 때마다 단위테스트를 해준다.
main문에서 생성자를 호출해서 기능이 돌아간다면 커밋을 날려준다

구현이 다 끝난 후 테스트 코드를 만들어보는 연습을 해보자
커맨드+n 을 누르면 generate에서 test를 만들 수 있다
빠르게 테스트 코드를 만들고 싶다면 마찬가지로 커맨드+n을 눌러 testcode를 생성한다
테스트 코드가 필요한 이유?
아까 main문에서 생성자를 호출하고 주석처리를 해가면서 기능이 잘 구현됐는지를 확인했다
이 기능을 컴퓨터가 판단하게 test를 만들어 주는 것이다
assertThat은 주장한다 라는 의미인데 이것이 내가 하려는 일과 같은지
컴퓨터가 확인하도록 떠넘긴다
ex) essertThat(string,int...).isEqualTo("string",int...)
JUnit5부터는 ParameterizedTest를 지원한다. (JUnit도 공부를 해보자)
