애플리케이션이 시작될 때, 어떤 클래스가 최초 한 번만 메모리를 할당(static)하고 해당 메모리에 인스턴스를 만들어 사용하는 패턴

즉, 싱글톤 패턴은 '하나'의 인스턴스만 생성하여 디자인 패턴이다
> 인스턴스가 필요할 때, 똑같은 인스턴스를 생성하지 않고 기존의 인스턴스를 활용한다

생성자가 여러번 호출되도 실제 생성되는 객체는 하나이며, 최초로 생성된 이후에 호출된 생성자는 이미 생성한 객체를 반환시킨다
(java에서는 생성자를 private으로 선언해서 다른 곳에서 사용하지 못하도록 만들고, getInstance() 메소드를 통해 받아서 인스턴스를 생성하도록 한다)

싱글톤 패턴을 쓰는 이유는 무엇일까?
객체를 생성할 때마다 메모리 영역을 할당 받아야 한다.
하지만 한번의 new를 통해 객체를 생성한다면 메모리 낭비를 방지할 수 있다
또한 싱글톤으로 구현한 인스턴스는 '전역'이므로 다른 클래스의 인스턴스들이 데이터를 공유할 수 있다는 장점이 있다

단점은 무엇일까?
싱글톤 패턴을 너무 많이 사용하게 되면 결합도가 높아지게 된다.
객체지향 프로그래밍에서 결합도가 높아진다는 것은 유지보수가 힘들다는 소리이다.
또한 멀티 스레드 환경에서 동기화 처리룰 하지 않았을 때 인스턴스가 2개 생성되는 문제도 발생할 수 있다
그래서 싱글톤 패턴을 잘 구현할 자신이 없다면, 꼭 필요한 상황이 아니라면 지양하는 것이 좋다

<멀티스레드 환경에서 안전한 싱글톤 만드는 법>
#Lazy Initialization (게으른 초기화)
private static으로 인스턴스 변수 만듬
private으로 생성자를 만들어 외부에서의 생성을 막음
synchronized 동기화를 활용해 스레드를 안전하게 만듬
하지만, synchronized는 큰 성능저하를 발생시키므로 권장하지 않는 방법

public class ThreadSafe_Lazy_Initialization{
 
    private static ThreadSafe_Lazy_Initialization instance;
 
    private ThreadSafe_Lazy_Initialization(){}
     
    public static synchronized ThreadSafe_Lazy_Initialization getInstance(){
        if(instance == null){
            instance = new ThreadSafe_Lazy_Initialization();
        }
        return instance;
    }
 
}

#Lazy Initialization + Double-checked Locking
게으른 초기화를 완화시키는 방법
먼저 조건문으로 인스턴스의 존재 여부를 확인한 다음 두번째 조건문에서 synchronized를 통해 동기화를 시켜 인스턴스를 생성하는 방법
스레드를 안전하게 만들면서, 처음 생성 이후에는 synchronized를 실행하지 않기 때문에 성능저하 완화가 가능함
하지만 완전히 완벽한 방법은 아님

public class ThreadSafe_Lazy_Initialization{
    private volatile static ThreadSafe_Lazy_Initialization instance;

    private ThreadSafe_Lazy_Initialization(){}

    public static ThreadSafe_Lazy_Initialization getInstance(){
    	if(instance == null) {
        	synchronized (ThreadSafe_Lazy_Initialization.class){
                if(instance == null){
                    instance = new ThreadSafe_Lazy_Initialization();
                }
            }
        }
        return instance;
    }
}

#Initialization on demand holder idiom (holder에 의한 초기화)
클래스 안에 클래스(holder)를 두어 JVM의 클래스 로더 매커니즘과 클래스가 로드되는 시점을 이용한 방법
위 방법처럼 동기화를 사용하지 않는 방법을 안하는 이유는, 개발자가 직접 동기화 문제에 대한 코드를 작성하면서 회피하려고 하면 프로그램 구조가 그만큼 복잡해지고 비용 문제가 발생할 수 있음. 또한 코드 자체가 정확하지 못할 때도 많음
이 때문에, 이것과 같은 방식으로 JVM의 클래스 초기화 과정에서 보장되는 원자적 특성을 이용해 싱글톤의 초기화 문제에 대한 책임을 JVM에게 떠넘기는 걸 활용함
클래스 안에 선언한 클래스인 holder에서 선언된 인스턴스는 static이기 때문에 클래스 로딩시점에서 한번만 호출된다. 또한 final을 사용해서 다시 값이 할당되지 않도록 만드는 방식을 사용한 것
실제로 가장 많이 사용되는 일반적인 싱글톤 클래스 사용 방법이 이 방법이다.

public class Something {
    private Something() {
    }
 
    private static class LazyHolder {
        public static final Something INSTANCE = new Something();
    }
 
    public static Something getInstance() {
        return LazyHolder.INSTANCE;
    }
}